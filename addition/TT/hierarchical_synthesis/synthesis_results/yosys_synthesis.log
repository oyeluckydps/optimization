Yosys Synthesis Log
==============================


 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Executing script file `yosys_timing_synthesis.ys' --

1. Executing Verilog-2005 frontend: /mnt/d/OneDrive/projects/Attention-VLSI/optimization/addition/TT/hierarchical_synthesis/synthesis_results/float_4e3m_adder_behavioral.v
Parsing Verilog input from `/mnt/d/OneDrive/projects/Attention-VLSI/optimization/addition/TT/hierarchical_synthesis/synthesis_results/float_4e3m_adder_behavioral.v' to AST representation.
Generating RTLIL representation for module `\float_4e3m_adder'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \float_4e3m_adder

2.2. Analyzing design hierarchy..
Top module:  \float_4e3m_adder
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/mnt/d/OneDrive/projects/Attention-VLSI/optimization/addition/TT/hierarchical_synthesis/synthesis_results/float_4e3m_adder_behavioral.v:9$1 in module float_4e3m_adder.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\float_4e3m_adder.$proc$/mnt/d/OneDrive/projects/Attention-VLSI/optimization/addition/TT/hierarchical_synthesis/synthesis_results/float_4e3m_adder_behavioral.v:9$1'.
     1/1: $1\result[7:0]

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\float_4e3m_adder.\result' from process `\float_4e3m_adder.$proc$/mnt/d/OneDrive/projects/Attention-VLSI/optimization/addition/TT/hierarchical_synthesis/synthesis_results/float_4e3m_adder_behavioral.v:9$1'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\float_4e3m_adder.$proc$/mnt/d/OneDrive/projects/Attention-VLSI/optimization/addition/TT/hierarchical_synthesis/synthesis_results/float_4e3m_adder_behavioral.v:9$1'.
Removing empty process `float_4e3m_adder.$proc$/mnt/d/OneDrive/projects/Attention-VLSI/optimization/addition/TT/hierarchical_synthesis/synthesis_results/float_4e3m_adder_behavioral.v:9$1'.
Cleaned up 1 empty switch.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.
<suppressed ~1 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \float_4e3m_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \float_4e3m_adder.
    New ctrl vector for $pmux cell $procmux$3: { $auto$opt_reduce.cc:134:opt_pmux$270 $auto$opt_reduce.cc:134:opt_pmux$268 $auto$opt_reduce.cc:134:opt_pmux$266 $auto$opt_reduce.cc:134:opt_pmux$264 $auto$opt_reduce.cc:134:opt_pmux$262 $auto$opt_reduce.cc:134:opt_pmux$260 $auto$opt_reduce.cc:134:opt_pmux$258 }
  Optimizing cells in module \float_4e3m_adder.
Performed a total of 1 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \float_4e3m_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \float_4e3m_adder.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \float_4e3m_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \float_4e3m_adder.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..

7.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..

7.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \float_4e3m_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \float_4e3m_adder.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$d7387fdb214042e5ef2d69a3f74948694b4bb65e\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~364 debug messages>

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.
<suppressed ~4132 debug messages>

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
<suppressed ~13407 debug messages>
Removed a total of 4469 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \float_4e3m_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \float_4e3m_adder.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..
Removed 0 unused cells and 2266 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \float_4e3m_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \float_4e3m_adder.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Printing statistics.

=== float_4e3m_adder ===

   Number of wires:                620
   Number of wire bits:           1112
   Number of public wires:           2
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                859
     $_MUX_                          3
     $_NOT_                        261
     $_OR_                         595

12. Executing CHECK pass (checking for obvious problems).
Checking module float_4e3m_adder...
Found and reported 0 problems.

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\float_4e3m_adder' to `<abc-temp-dir>/input.blif'..
Extracted 859 gates and 876 wires to a netlist network with 16 inputs and 3 outputs.

13.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      100
ABC RESULTS:        internal signals:      857
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        3
Removing temp directory.

14. Printing statistics.

=== float_4e3m_adder ===

   Number of wires:                736
   Number of wire bits:           1228
   Number of public wires:           2
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     $lut                          100

15. Executing CHECK pass (checking for obvious problems).
Checking module float_4e3m_adder...
Found and reported 0 problems.

16. Executing OPT pass (performing simple optimizations).

16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \float_4e3m_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \float_4e3m_adder.
Performed a total of 0 changes.

16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

16.6. Executing OPT_DFF pass (perform DFF optimizations).

16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..
Removed 0 unused cells and 637 unused wires.
<suppressed ~1 debug messages>

16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

16.9. Rerunning OPT passes. (Maybe there is more to do..)

16.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \float_4e3m_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \float_4e3m_adder.
Performed a total of 0 changes.

16.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\float_4e3m_adder'.
Removed a total of 0 cells.

16.13. Executing OPT_DFF pass (perform DFF optimizations).

16.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \float_4e3m_adder..

16.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module float_4e3m_adder.

16.16. Finished OPT passes. (There is nothing left to do.)

17. Printing statistics.

=== float_4e3m_adder ===

   Number of wires:                 99
   Number of wire bits:            121
   Number of public wires:           2
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     $lut                          100

18. Printing statistics.

=== float_4e3m_adder ===

   Number of wires:                 99
   Number of wire bits:            121
   Number of public wires:           2
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     $lut                          100

   Estimated number of transistors:          0+

19. Generating Graphviz representation of design.
Writing dot description to `/mnt/d/OneDrive/projects/Attention-VLSI/optimization/addition/TT/hierarchical_synthesis/synthesis_results/circuit_visualization.dot'.
Dumping module float_4e3m_adder to page 1.

20. Executing Verilog backend.

20.1. Executing BMUXMAP pass.

20.2. Executing DEMUXMAP pass.
Dumping module `\float_4e3m_adder'.

21. Executing BLIF backend.

22. Executing JSON backend.

End of script. Logfile hash: dfd5cf34de, CPU: user 0.61s system 0.05s, MEM: 52.55 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 40% 1x abc (0 sec), 21% 14x opt_expr (0 sec), ...
